Java File Handling:
---------------------

In any programming language, in any application, providing input to the application and getting output from the Application is Essential.
In Java Applications, we use Streams for this input and output operations.
we have 2 types of streams :
1) ByteOrientedStream  : 1 byte of data is transferred
2) CharacterOrientedStream : 2 bytes of data is transferred


There are two types of ByteOrientedStreams:
1) InputStream
2) OutputStream

ByteInputStream  Types :                            ByteOutputStream Types:
--------------                                    --------------------------

  ByteArrayInputStream                              ByteArrayOutputStream
  FilterInputStream                                 FilterOutputStream
  DataInputStream                                   DataOutputStream
  ObjectInput Stream                                FileOutputStream
  FileInputStream                                   PrintStream
  StringBufferInputStream                           BufferedOutputStream
  BufferedInputStream
  
  
There are two types of CharacterOrientedStreams:
 1) Reader
 2) writer
 
 
 Reader                                               writer
 ------------------------------------------------------------------
 
 CharArrayReader                          CharArrayWriter
 FilterReader                             FilterWriter
 FileReader                               FileWriter
 BufferedReader                           BufferedWriter
 InputStreamReader                        printWriter
 
 
 
 ByteOriented Stream steps:
 --------------------------
 write data to target files:
    1) create  *outputStream between javaProgram and target file   :  FileOutputStream fos = new FileOutputStream(new File("Target.txt"));
    2) declare the data and convert it into byteArray[] :   String data ="Hello";  bytes[] b = data.getBytes();
    3) write byteArray data into FileOutputStream :                               fos.write(b);
    4) close FileOutputStream:                                                    fos.close();
    
read data from source file:
  1) create *inputStream between source file and java programme:                    FileInputStream fis = new FileInputStream( ("abc.txt")) -> throws filenotfound exception.
  2) get the size of the data from inputStream and prepare byte[] with data size :  int size = fis.available(); byte[] b = new byte[size];
  3) read the data from FileInputStream to byteArray :                               fis.read(b);
  4)convert the data from byte[] to String :                                         String data = new String(b); system.out.print(data);
  5) close the FileInputStream(); 
    
Write a Java program to display particular file content on command 
prompt by taking filename as command line input? 

String fileName = args[0];
FileInputStream fis = new FileInputStream(fileName);
int size = fis.available();
byte[] b = new bytes[size];
fis.read(b);

string data  = new string(b);
System.out.println(data);

fis.close();


Write a Java program to count no of words available in a particular 
text file and how many times the word "Durga" is repeated? 

FileInputStream fis = new FileInputStream("filename.txt");
int size = fis.available();
byte[] b = new byte[size];
fis.read(b);
String data = new String(b);

StringTokenizer st = new StringTokenizer(data);
st.countTokens()  => will provide the number of words in the file;
int count =0;
while(st.hasMoreTokens()){
String token = st.nextToken();
if(token.equals("durga")){
count ++;
}

System.out.println("count is " +count );
}


Write a Java program to copy an image from a source file to 
a particular target file?

FileInputStream fis = new FileInputStream("abc.txt");
int size = fis.available();
byte[] b = new byte[size];
fis.read(b);

FileOutputStream fos = new FileOutputStream("target.txt");
//declare data and convert data into byte[] using getBytes() ;

fos.write(b);
fis.close();
fos.close();


CharacterOriented Stream workflow:
----------------------------------
write data to a targetfile:

1) create *writerObject :                                                         FileWriter fw = new FileWriter("filename.txt");
2) Declare the data which we want to transfer and convert that data to char[];    string data= "Hello";  Char[] c = data.toCharArray();
3) write char[] into FileWriter :                                                 fw.write(c);
4) close the fileWriter :                                                         fw.close();

Read data from a source file:
1) create *reader object         :                                                               FileReader fr = new FileReader("source.txt");                                                                  
2) read the data using read() method ;                                                           int val = fr.read();
3) the data returned will be ASCII, convert it into Char explicitly and then append to String ;     while(val != -1){ Data  = Data +(char)val;}
4) close the reader object :                                                                            fr.close()


FileReader fr = new FileReader("source.txt");
int val = fr.read();
String Data = null;
while(val != -1){
Data  = Data +(char)val;
}
fr.close()


-------------------------- ---------------------------- ----------------------------- -----------------------

Approaches to provide Dynamic input :

1)BufferedReader:  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));   readLine() && read() methods;
2)Scanner : Scanner sc = new Scanner(system.in); sc.next(); sc.nextint(), sc.nextLine(), sc.nextbyte();
3)Console : Console C =System.console(); c.readLine() returns String; c.readPassword() returns char[], convert it to new String(data);


 
 

